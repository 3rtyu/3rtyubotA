// utils/gacha.js
const rarityWeights = {
  '‚≠êÔ∏è':     59.9999,
  '‚≠ê‚≠ê':     30,
  '‚≠ê‚≠ê‚≠ê':    7,
  '‚≠ê‚≠ê‚≠ê‚≠ê':   3,
  '‚ú®SECRET‚ú®': 0.0001
};

const itemsByRarity = {
  '‚≠êÔ∏è':     ['ÊÉ≥„ÅÑ„ÅÆ„Åã„Åë„Çâ0.1ÂÄã', '„ÇØ„É™„Çπ„Çø„É´-1ÂÄã', '‰ΩøÁî®Ê∏à„Åø„Ç∑„É™„Ç¢„É´„Ç≥„Éº„Éâ'],
  '‚≠ê‚≠ê':     ['ü¶ê', 'È£≤„Åø„Åã„Åë„ÅÆ„É©„Ç§„Éñ„Éú„Éº„Éä„ÇπÂ§ß', 'È≠îÊ≥ï„ÅÆÁπäÁ∂≠'],
  '‚≠ê‚≠ê‚≠ê':    ['„Éü„É©„ÇØ„É´„Éî„Éº„Çπ', '„Çπ„Ç≠„É´„Ç¢„ÉÉ„Éó„Çπ„Ç≥„Ç¢(ÂàùÁ¥ö)', '„Çπ„Çø„É≥„ÉóÂâ≤ÂºïÂà∏'],
  '‚≠ê‚≠ê‚≠ê‚≠ê':   ['Ê¨†„Åë„Åü‰∏ÉËâ≤„ÅÆ„É°„É¢„É™„Ç¢', '„Éç„ÇÆ0.1ÂÄã', '‰ΩøÁî®Ê∏à„Åø„Ç≥„Éç„ÇØ„Éà„É©„Ç§„Éñ„ÅÆ„ÉÅ„Ç±„ÉÉ„Éà'],
  '‚ú®SECRET‚ú®': ['‰Ωô„Å£„Åü„É¨„Ç≥„Éº„Éâ']
};

const colorMap = {
  '‚≠êÔ∏è':      0xAAAAAA,
  '‚≠ê‚≠ê':      0x9ACD32,
  '‚≠ê‚≠ê‚≠ê':     0x0000FF,
  '‚≠ê‚≠ê‚≠ê‚≠ê':    0xFF69B4,
  '‚ú®SECRET‚ú®': 0xFF0000
};

const roleNames = {
  '‚≠êÔ∏è':      'Êòü1„ÇíÂºï„ÅçÂΩì„Å¶„Åü!',
  '‚≠ê‚≠ê':      'Êòü2„ÇíÂºï„ÅçÂΩì„Å¶„Åü!',
  '‚≠ê‚≠ê‚≠ê':     'Êòü3„ÇíÂºï„ÅçÂΩì„Å¶„Åü!',
  '‚≠ê‚≠ê‚≠ê‚≠ê':    'Êòü4„ÇíÂºï„ÅçÂΩì„Å¶„Åü!',
  '‚ú®SECRET‚ú®':  '„Ç∑„Éº„ÇØ„É¨„ÉÉ„Éà„ÇíÂºï„ÅçÂΩì„Å¶„Åü!'
};

const totalWeight = Object.values(rarityWeights).reduce((s, w) => s + w, 0);

/**
 * 1Âõû„Ç¨„ÉÅ„É£„ÇíÂºï„Åè
 * @returns {{rarity: string, item: string}}
 */
function pullOnce() {
  let rand = Math.random() * totalWeight;
  let selected;
  for (const [rarity, weight] of Object.entries(rarityWeights)) {
    if (rand < weight) {
      selected = rarity;
      break;
    }
    rand -= weight;
  }
  const pool = itemsByRarity[selected];
  const item = pool[Math.floor(Math.random() * pool.length)];
  return { rarity: selected, item };
}

/**
 * Ë§áÊï∞Âõû„Ç¨„ÉÅ„É£„ÇíÂºï„Åè
 * @param {number} count
 * @returns {Array<{rarity: string, item: string}>}
 */
function pullMany(count = 1) {
  return Array.from({ length: count }, () => pullOnce());
}

module.exports = { pullOnce, pullMany, colorMap, roleNames };
